"""Collection of admin utility functions"""
import os
import sys
import logging

from nvp.nvp_component import NVPComponent
from nvp.nvp_context import NVPContext

logger = logging.getLogger(__name__)

# Default .editorconfig content:
DEFAULT_EDITORCONFIG_CONTENT = """# Autogenerated .editorconfig file
# Update as needed.

root = true

[*]
end_of_line = lf
"""

# Default .gitignore content:
DEFAULT_GITIGNORE_CONTENT = """# Ignore python compiled files:
*.pyc

# Ignore .vs_env file:
.vs_env

# Ignore log files:
*.log
"""

# Default python .env content:
DEFAULT_PYTHONENV_CONTENT = """# Autogenerated .vs_env file
# Update as needed.

PYTHONPATH=.${SEP}${NVP_ROOT_DIR}
"""

# Default nvp_config.json content:
DEFAULT_NVPCONFIG_CONTENT = """/* NVP project configuration file */
{
    // Add config entries as needed here.
}
"""

# Default nvp_plug.py content:
DEFAULT_NVPPLUG_CONTENT = '''""" NVP plug entrypoint module for ${PROJ_NAME} """

import logging

from nvp.nvp_component import NVPComponent
from nvp.nvp_context import NVPContext

logger = logging.getLogger('${PROJ_NAME}')


def register_nvp_plugin(context, proj):
    """This function should register this plugin in the current NVP context"""
    logger.info("Registering ${PROJ_NAME} NVP plugin.")
    proj.register_component('${PROJ_NAME}', MyComponent(context))


class MyComponent(NVPComponent):
    """Example component class"""

    def __init__(self, ctx: NVPContext):
        """Constructor for component"""
        NVPComponent.__init__(self, ctx)

        # define parsers and build required logic from here:
        # desc = {
        #     "build": {"libs": None},
        # }
        # ctx.define_subparsers("main", desc)
        # psr = ctx.get_parser('main.build')
        # psr.add_argument("-c", "--compiler", dest='compiler_type', type=str,
        #                  help="Specify which type of compiler should be selected")

'''

# Default .gitattributes content:
# cf. https://rehansaeed.com/gitattributes-best-practices/
###############################
# Git Large File System (LFS) #
###############################
# Could use 'filter=lfs diff=lfs merge=lfs ' below but not clear yet how to do that
# properly
DEFAULT_GITATTRIBUTES_CONTENT = """###############################
# Git Line Endings            #
###############################

# Set default behaviour to automatically normalize line endings.
* text=auto

# Force batch scripts to always use CRLF line endings so that if a repo is accessed
# in Windows via a file share from Linux, the scripts will work.
*.{cmd,[cC][mM][dD]} text eol=crlf
*.{bat,[bB][aA][tT]} text eol=crlf

# Force bash scripts to always use LF line endings so that if a repo is accessed
# in Unix via a file share from Windows, the scripts will work.
*.sh text eol=lf

# Archives
*.7z -text
*.br -text
*.gz -text
*.tar -text
*.zip -text

# Documents
*.pdf -text

# Images
*.gif -text
*.ico -text
*.jpg -text
*.pdf -text
*.png -text
*.psd -text
*.webp -text

# Fonts
*.woff2 -text

# Other
*.exe -text

"""


def register_component(ctx: NVPContext):
    """Register this component in the given context"""
    comp = AdminManager(ctx)
    ctx.register_component('admin', comp)


class AdminManager(NVPComponent):
    """Admin command manager class"""

    def __init__(self, ctx: NVPContext):
        """Admin commands manager constructor"""
        NVPComponent.__init__(self, ctx)

        # # Check the value of the sub command:
        # sub_cmd = self.settings['l1_cmd']
        # if sub_cmd == 'install-cli':
        #     self.install_cli()

        desc = {
            "admin": {
                "install": {"cli": None, "reqs": None, "repo": None},
                "init": None,
            }
        }
        ctx.define_subparsers("main", desc)

    def install_cli(self):
        """Install a CLI script in .bashrc if application"""

        # Check if an $HOME folder is provider:
        home_dir = os.getenv('HOME')
        if home_dir is None:
            logger.error("Cannot install cli alias: no $HOME environment variable detected.")
            return

        logger.info("Home folder is: %s", home_dir)

        # Check if we have a .bashrc file in that folder:
        bashrc_file = self.get_path(home_dir, ".bashrc")
        if not self.file_exists(bashrc_file):
            logger.warning("Cannot install cli alias: no .bashrc file in HOME folder.")
            return

        script_path = self.get_path(self.ctx.get_root_dir(), "cli.sh")

        # If we are on windows, we may want to convert this path to a cygwin path
        # if we are in a cygwin environment (but running the native python executable):
        if self.is_windows:
            script_path = self.to_cygwin_path(script_path)
            assert script_path is not None, "Invalid cygwin environment."

        sline = f"\n[ -f \"{script_path}\" ] && source \"{script_path}\"\n"

        # Check if this string is already in the bashrc file:
        content = self.read_text_file(bashrc_file)

        if content.find(sline) == -1:
            # We should add the string:
            logger.info("Adding source file in .bashrc for NervProj")

            # Make a backup of the file:
            self.copy_file(bashrc_file, bashrc_file+".bak", force=True)
            self.write_text_file(content+sline, bashrc_file, newline='\n')
        else:
            logger.info("NervProj setup file already referenced in .bashrc")

        # pp = pprint.PrettyPrinter(indent=2)
        # res = pp.pformat(dict(os.environ))
        # logger.info("Current environment is: %s", res)

    def install_python_requirements(self):
        """Install the requirements for the main python environment using pip"""

        logger.info("Installing python requirements...")
        reqfile = self.get_path(self.ctx.get_root_dir(), "tools/requirements.txt")
        cmd = [sys.executable, "-m", "pip", "install", "-r", reqfile]
        # logger.info("Executing command: %s", cmd)
        self.execute(cmd)
        logger.info("Done installing python requirements.")

    def install_repository_bootstrap(self):
        """Install the bootstraped repository for this NervProj folder if not present already."""

        base_dir = self.ctx.get_root_dir()
        if self.dir_exists(base_dir, ".git"):
            logger.info(".git folder already exists, bootstrapping ignored.")
            return

        # We need to bootstrap in a temp folder:
        git = self.get_component('git')

        url = self.config["repository_url"]

        dest_dir = self.get_path(base_dir, "temp", "nervproj")
        logger.info("Cloning NervProj folder into %s...", dest_dir)
        git.clone_repository(url, dest_dir)

        # When cloning is done we should move the .git folder from the clone location into our root
        self.move_path(self.get_path(dest_dir, ".git"), self.get_path(base_dir, ".git"))

        # And finally we remove the remaining files:
        self.remove_folder(dest_dir)

        logger.info("Done bootstrapping NervProj project.")

    def setup_global_vscode_config(self, config_dir=None):
        """Setup global Visual studio code user settings"""

        if config_dir is None:
            # * on windows: in C:/Users/kenshin/AppData/Roaming/Code/User/settings.json
            # => should use os.getenv('APPDATA')
            # * on linux: in /home/kenshin/.config/Code/User/settings.json
            if self.is_windows:
                base_dir = os.getenv("APPDATA")
            else:
                base_dir = self.get_path(self.ctx.get_home_dir(), ".config")

            config_dir = self.get_path(base_dir, "Code", "User")

        cfg_file = self.get_path(config_dir, "settings.json")

        config = {}
        ref_config = None

        if not self.file_exists(cfg_file):
            # Ensure the folder exists:
            self.make_folder(config_dir)
        else:
            # Read the config:
            config = self.read_json(cfg_file)
            # Keep a copy to compare the changes:
            ref_config = self.read_json(cfg_file)

        # Now write the changes we want:
        tools = self.get_component('tools')

        config["git.path"] = tools.get_git_path()
        config["python.linting.pylintEnabled"] = True
        config["python.linting.enabled"] = True
        config["python.linting.pylintPath"] = tools.get_tool_path('pylint')
        config["python.linting.pylintArgs"] = ["--max-line-length=120"]
        config["python.defaultInterpreterPath"] = tools.get_tool_path('python')
        config["python.formatting.autopep8Path"] = tools.get_tool_path("autopep8")
        config["python.formatting.provider"] = "autopep8"
        config["python.formatting.autopep8Args"] = ["--max-line-length=120", "--experimental"]
        config["editor.formatOnSave"] = True
        config["cmakeFormat.exePath"] = tools.get_tool_path("cmake_format")

        if ref_config is None or config != ref_config:
            logger.info("Wrtting updated vscode settings in %s", cfg_file)
            self.write_json(config, cfg_file)
        else:
            logger.info("No change in %s", cfg_file)

    def init_project_config(self, proj_dir, proj_name):
        """Setup initial project local config elements"""
        config_dir = self.get_path(proj_dir, ".vscode")

        cfg_file = self.get_path(config_dir, "settings.json")
        self.make_folder(config_dir)

        config = {}
        ref_config = None

        if self.file_exists(cfg_file):
            # Read the config:
            config = self.read_json(cfg_file)
            # Keep a copy to compare the changes:
            ref_config = self.read_json(cfg_file)

        config["python.envFile"] = "${workspaceFolder}/.vs_env"

        if ref_config is None or config != ref_config:
            logger.info("Wrtting updated vscode settings in %s", cfg_file)
            self.write_json(config, cfg_file)
        else:
            logger.info("No change in %s", cfg_file)

        # Write the env file if needed:
        dest_file = self.get_path(proj_dir, ".vs_env")
        if not self.file_exists(dest_file):
            logger.info("Writting python env file %s", dest_file)
            content = DEFAULT_PYTHONENV_CONTENT
            content = content.replace("${NVP_ROOT_DIR}", self.ctx.get_root_dir())
            content = content.replace("${SEP}", ";" if self.is_windows else ":")
            self.write_text_file(content, dest_file)

        # and write a .editorconfig file:
        dest_file = self.get_path(proj_dir, ".editorconfig")
        if not self.file_exists(dest_file):
            logger.info("Writting editor config file %s", dest_file)
            content = DEFAULT_EDITORCONFIG_CONTENT
            self.write_text_file(content, dest_file)

        # and write a .gitignore file:
        dest_file = self.get_path(proj_dir, ".gitignore")
        if not self.file_exists(dest_file):
            logger.info("Writting .gitignore file %s", dest_file)
            content = DEFAULT_GITIGNORE_CONTENT
            self.write_text_file(content, dest_file)

        # and write a .gitattributes file:
        dest_file = self.get_path(proj_dir, ".gitattributes")
        if not self.file_exists(dest_file):
            logger.info("Writting .gitattributes file %s", dest_file)
            content = DEFAULT_GITATTRIBUTES_CONTENT
            self.write_text_file(content, dest_file)

        # write a nvp_config.json file:
        dest_file = self.get_path(proj_dir, "nvp_config.json")
        if not self.file_exists(dest_file):
            logger.info("Writting nvp_config.json file %s", dest_file)
            content = DEFAULT_NVPCONFIG_CONTENT
            self.write_text_file(content, dest_file)

        # write a nvp_plug.py file:
        dest_file = self.get_path(proj_dir, "nvp_plug.py")
        if not self.file_exists(dest_file):
            logger.info("Writting nvp_plug.py file %s", dest_file)
            content = DEFAULT_NVPPLUG_CONTENT.replace("${PROJ_NAME}", proj_name)
            self.write_text_file(content, dest_file)

    def process_command(self, cmd0):
        """Re-implementation of the process_command method."""

        if cmd0 != 'admin':
            return False

        cmd1 = self.ctx.get_command(1)
        cmd2 = self.ctx.get_command(2)
        if cmd1 == 'install' and cmd2 == 'cli':
            self.install_cli()
            return True

        if cmd1 == 'install' and cmd2 == 'reqs':
            self.install_python_requirements()
            return True

        if cmd1 == 'install' and cmd2 == 'repo':
            self.install_repository_bootstrap()
            return True

        if cmd1 == 'init':
            self.setup_global_vscode_config()
            proj = self.ctx.get_current_project()
            proj_dir = proj.get_root_dir() if proj is not None else self.ctx.get_root_dir()
            proj_name = proj.get_name(False) if proj is not None else "NervProj"
            self.init_project_config(proj_dir, proj_name)
            return True

        return False
